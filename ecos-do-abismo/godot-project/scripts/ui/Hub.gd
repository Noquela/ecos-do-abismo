# Hub Principal - UX Melhorada com Assets Visuais
extends Control

# UI Components (original paths)
@onready var level_label = $StatusPanel/StatusContainer/PlayerInfo/LevelLabel
@onready var xp_label = $StatusPanel/StatusContainer/XPProgress/XPLabel
@onready var xp_bar = $StatusPanel/StatusContainer/XPProgress/XPBar
@onready var coins_label = $StatusPanel/StatusContainer/PlayerInfo/CoinsLabel

@onready var play_btn = $ActionButtons/PlayButton

@onready var stats_label = $StatsSection/UpgradesPanel/UpgradesContainer/StatsLabel
@onready var progress_label = $StatsSection/ProgressPanel/ProgressContainer/ProgressLabel

# Optional elements (may not exist in scene)
var welcome_label
var abyss_status_label
var next_action_label
var game_explanation
var background_texture
var card_preview

func _ready():
	print("üè† Hub do jogador - Assets visuais integrados")

	# Try to find optional elements
	_find_optional_elements()

	# Setup visual elements
	_setup_visual_elements()

	# Apply eldritch theme to all UI elements
	_apply_eldritch_theme()

	# Conectar bot√µes
	play_btn.pressed.connect(_on_play_pressed)

	_update_ui()
	_preview_random_card()

func _find_optional_elements():
	"""Find optional UI elements that may not exist"""
	welcome_label = find_child("WelcomeLabel")
	abyss_status_label = find_child("AbyssStatus")
	next_action_label = find_child("NextActionLabel")
	game_explanation = find_child("GameExplanation")
	background_texture = find_child("BackgroundTexture")
	# Remove card preview - n√£o existe mais
	card_preview = null

func _setup_visual_elements():
	"""Configure visual elements with REVOLUTIONARY generated assets"""
	# Set main menu background
	var bg_path = "res://assets/generated/ui/bg_main_menu.png"
	if ResourceLoader.exists(bg_path):
		var bg_texture_res = load(bg_path)
		if background_texture and bg_texture_res:
			background_texture.texture = bg_texture_res
			print("‚úÖ Background carregado: Main Menu")

	# Load NEW REVOLUTIONARY assets
	_setup_revolutionary_assets()

	# Add visual polish to UI elements
	print("üé® REVOLUTIONARY Visual elements configurados")

func _setup_revolutionary_assets():
	"""Setup ELDRITCH THEMED UI assets generated by AI"""
	print("üîÆ Aplicando assets ELDRITCHS tem√°ticos...")

	# Apply ELDRITCH button with proper scaling
	var eldritch_button_path = "res://assets/generated/ui/button_eldritch_final.png"
	print("üîç Tentando carregar bot√£o: ", eldritch_button_path)
	print("üîç ResourceLoader.exists: ", ResourceLoader.exists(eldritch_button_path))
	print("üîç play_btn existe: ", play_btn != null)

	if play_btn and ResourceLoader.exists(eldritch_button_path):
		var button_texture = load(eldritch_button_path)
		print("üîç Textura carregada: ", button_texture)
		print("üîç Textura size: ", button_texture.get_size() if button_texture else "NULL")

		var style_box = StyleBoxTexture.new()
		style_box.texture = button_texture

		# Proper scaling to avoid UI overflow
		play_btn.custom_minimum_size = Vector2(160, 50)
		play_btn.add_theme_stylebox_override("normal", style_box)
		play_btn.add_theme_stylebox_override("hover", style_box)
		play_btn.add_theme_stylebox_override("pressed", style_box)

		print("üëÅÔ∏è ELDRITCH Button aplicado! Size: ", play_btn.size)
	else:
		print("‚ùå FALHOU ao aplicar bot√£o eldritch")

	# Apply ELDRITCH panel with organic tentacles
	var eldritch_panel_path = "res://assets/generated/ui/panel_eldritch_tentacles.png"
	var status_panel = find_child("StatusPanel")
	if status_panel and ResourceLoader.exists(eldritch_panel_path):
		var panel_texture = load(eldritch_panel_path)
		var panel_style = StyleBoxTexture.new()
		panel_style.texture = panel_texture
		# Proper margins to prevent overflow
		panel_style.content_margin_left = 15
		panel_style.content_margin_right = 15
		panel_style.content_margin_top = 15
		panel_style.content_margin_bottom = 15
		status_panel.add_theme_stylebox_override("panel", panel_style)
		print("ü¶ë ELDRITCH Panel with tentacles aplicado!")

	# Apply ELDRITCH themed icons
	_apply_eldritch_icons()

	print("üåë ELDRITCH UI Transformation Complete!")

func _apply_eldritch_icons():
	"""Apply themed eldritch icons"""
	# Note: Icons will be applied via theme system for better performance
	var hp_icon_path = "res://assets/generated/ui/icon_hp_eldritch_eye.png"
	var energy_icon_path = "res://assets/generated/ui/icon_energy_eldritch_rune.png"

	if ResourceLoader.exists(hp_icon_path):
		print("üëÅÔ∏è ELDRITCH HP Eye icon ready!")
	if ResourceLoader.exists(energy_icon_path):
		print("‚ö° ELDRITCH Energy Rune icon ready!")

	print("üé® ELDRITCH Icons system ready!")

func _apply_eldritch_theme():
	"""Apply ADVANCED visual effects theme"""

	# ADVANCED GRADIENT BUTTON with multiple effects
	if play_btn:
		var normal_style = StyleBoxFlat.new()
		var hover_style = StyleBoxFlat.new()
		var pressed_style = StyleBoxFlat.new()

		# GRADIENTS - Dark to purple
		normal_style.bg_color = Color(0.15, 0.1, 0.25, 0.95)
		hover_style.bg_color = Color(0.25, 0.15, 0.4, 0.98)
		pressed_style.bg_color = Color(0.1, 0.05, 0.2, 0.9)

		# ADVANCED BORDERS with glow effect
		for style in [normal_style, hover_style, pressed_style]:
			style.border_width_left = 3
			style.border_width_right = 3
			style.border_width_top = 3
			style.border_width_bottom = 3
			style.corner_radius_top_left = 12
			style.corner_radius_top_right = 12
			style.corner_radius_bottom_left = 12
			style.corner_radius_bottom_right = 12

		# Different border colors for each state
		normal_style.border_color = Color(0.6, 0.4, 0.8, 0.8)
		hover_style.border_color = Color(0.8, 0.6, 1.0, 1.0)
		pressed_style.border_color = Color(0.4, 0.2, 0.6, 0.6)

		# SHADOW EFFECTS
		normal_style.shadow_color = Color(0.3, 0.2, 0.5, 0.7)
		normal_style.shadow_size = 8
		normal_style.shadow_offset = Vector2(4, 4)

		hover_style.shadow_color = Color(0.5, 0.3, 0.8, 0.9)
		hover_style.shadow_size = 12
		hover_style.shadow_offset = Vector2(6, 6)

		play_btn.add_theme_stylebox_override("normal", normal_style)
		play_btn.add_theme_stylebox_override("hover", hover_style)
		play_btn.add_theme_stylebox_override("pressed", pressed_style)

		# ENHANCED text with glow
		play_btn.add_theme_color_override("font_color", Color(1.0, 0.95, 1.0, 1.0))
		play_btn.add_theme_font_size_override("font_size", 20)

		# Add ENHANCED glow effect to button
		play_btn.modulate = Color(1.1, 1.0, 1.2, 1.0)

		# Add pulsing glow animation
		_add_button_glow_pulse(play_btn)

	# ENHANCED EXISTING PANELS
	var status_panel = find_child("StatusPanel")
	if status_panel:
		_create_enhanced_panel(status_panel, Color(0.05, 0.08, 0.15, 0.95), Vector2(5, 5))

	# Style stats section panels
	var upgrades_panel = find_child("UpgradesPanel")
	if upgrades_panel:
		_create_enhanced_panel(upgrades_panel, Color(0.06, 0.08, 0.12, 0.93), Vector2(3, 4))

	var progress_panel = find_child("ProgressPanel")
	if progress_panel:
		_create_enhanced_panel(progress_panel, Color(0.08, 0.06, 0.14, 0.93), Vector2(4, 3))

	# ADVANCED PROGRESS BAR with gradient
	if xp_bar:
		var bg_style = StyleBoxFlat.new()
		var fill_style = StyleBoxFlat.new()

		# Background with inner shadow effect
		bg_style.bg_color = Color(0.05, 0.05, 0.1, 0.9)
		bg_style.border_width_left = 2
		bg_style.border_width_right = 2
		bg_style.border_width_top = 2
		bg_style.border_width_bottom = 2
		bg_style.border_color = Color(0.2, 0.2, 0.3, 0.9)
		bg_style.corner_radius_top_left = 8
		bg_style.corner_radius_top_right = 8
		bg_style.corner_radius_bottom_left = 8
		bg_style.corner_radius_bottom_right = 8

		# Glowing fill with gradient colors
		fill_style.bg_color = Color(0.3, 0.7, 1.0, 0.95)
		fill_style.corner_radius_top_left = 6
		fill_style.corner_radius_top_right = 6
		fill_style.corner_radius_bottom_left = 6
		fill_style.corner_radius_bottom_right = 6

		# Glow effect on fill
		fill_style.shadow_color = Color(0.3, 0.7, 1.0, 0.5)
		fill_style.shadow_size = 4
		fill_style.shadow_offset = Vector2(0, 0)

		xp_bar.add_theme_stylebox_override("background", bg_style)
		xp_bar.add_theme_stylebox_override("fill", fill_style)

	# Add SHADOW BOXES and extra panels
	_add_shadow_box_effects()

	print("‚ú® ADVANCED Visual Effects Theme Applied!")

func _add_button_glow_pulse(button: Button):
	"""Add pulsing glow effect to button"""
	var tween = button.create_tween()
	tween.set_loops()

	var bright_glow = Color(1.3, 1.1, 1.4, 1.0)
	var normal_glow = Color(1.1, 1.0, 1.2, 1.0)

	tween.tween_property(button, "modulate", bright_glow, 1.5)
	tween.tween_property(button, "modulate", normal_glow, 1.5)

func _add_shadow_box_effects():
	"""Add shadow box effects with varied offsets to other panels"""
	# Find and enhance other panels
	var stats_section = find_child("StatsSection")
	if stats_section:
		var upgrades_panel = find_child("UpgradesPanel")
		var progress_panel = find_child("ProgressPanel")

		if upgrades_panel:
			_create_shadow_box(upgrades_panel, Vector2(3, 5))
		if progress_panel:
			_create_shadow_box(progress_panel, Vector2(5, 3))

func _create_shadow_box(panel: Panel, shadow_offset: Vector2):
	"""Create shadow box with custom offset"""
	var style = StyleBoxFlat.new()

	# Base dark theme
	style.bg_color = Color(0.06, 0.08, 0.12, 0.92)

	# Thick borders with varied colors
	style.border_width_left = 3
	style.border_width_right = 3
	style.border_width_top = 3
	style.border_width_bottom = 3
	style.border_color = Color(0.4, 0.35, 0.55, 0.85)

	# VARIED corner radius for organic feel
	style.corner_radius_top_left = 10
	style.corner_radius_top_right = 14
	style.corner_radius_bottom_left = 12
	style.corner_radius_bottom_right = 8

	# Custom shadow with offset
	style.shadow_color = Color(0.15, 0.1, 0.25, 0.75)
	style.shadow_size = 8
	style.shadow_offset = shadow_offset

	panel.add_theme_stylebox_override("panel", style)

func _create_enhanced_panel(panel: Panel, bg_color: Color, shadow_offset: Vector2):
	"""Create enhanced panel with professional styling"""
	var style = StyleBoxFlat.new()

	style.bg_color = bg_color

	# THICK professional borders
	style.border_width_left = 4
	style.border_width_right = 4
	style.border_width_top = 4
	style.border_width_bottom = 4
	style.border_color = Color(0.4, 0.3, 0.6, 0.9)

	# VARIED organic corners
	style.corner_radius_top_left = 15
	style.corner_radius_top_right = 12
	style.corner_radius_bottom_left = 10
	style.corner_radius_bottom_right = 18

	# PROFESSIONAL shadows
	style.shadow_color = Color(0.15, 0.1, 0.25, 0.8)
	style.shadow_size = 10
	style.shadow_offset = shadow_offset

	panel.add_theme_stylebox_override("panel", style)

func _style_sidebar_panel(panel: Panel, bg_color: Color, shadow_offset: Vector2):
	"""Style sidebar panels with asymmetric design"""
	var style = StyleBoxFlat.new()

	style.bg_color = bg_color

	# ASYMMETRIC borders for organic feel
	style.border_width_left = 5
	style.border_width_right = 3
	style.border_width_top = 4
	style.border_width_bottom = 6
	style.border_color = Color(0.4, 0.3, 0.6, 0.9)

	# ASYMMETRIC corners for handmade feel
	style.corner_radius_top_left = 18
	style.corner_radius_top_right = 8
	style.corner_radius_bottom_left = 12
	style.corner_radius_bottom_right = 22

	# DRAMATIC shadows
	style.shadow_color = Color(0.1, 0.05, 0.25, 0.85)
	style.shadow_size = 12
	style.shadow_offset = shadow_offset

	panel.add_theme_stylebox_override("panel", style)

func _style_nested_panels():
	"""Style nested panels with variety"""
	# Status panel
	var status_panel = find_child("StatusPanel")
	if status_panel:
		_create_shadow_box(status_panel, Vector2(3, 4))

	# Corruptions panel
	var corruptions_panel = find_child("CorruptionsPanel")
	if corruptions_panel:
		_create_shadow_box(corruptions_panel, Vector2(4, 2))

	# Progress panel
	var progress_panel = find_child("ProgressPanel")
	if progress_panel:
		_create_shadow_box(progress_panel, Vector2(2, 5))

	# Achievements panel
	var achievements_panel = find_child("AchievementsPanel")
	if achievements_panel:
		_create_shadow_box(achievements_panel, Vector2(5, 3))

func _create_epic_title(title_label: Label):
	"""Create an epic, ominous title with multiple effects"""
	title_label.add_theme_font_size_override("font_size", 36)
	title_label.add_theme_color_override("font_color", Color(1.0, 0.9, 0.3, 1.0))  # Cosmic gold

	# Multiple shadow layers for epic glow
	title_label.add_theme_color_override("font_shadow_color", Color(0.8, 0.6, 0.1, 0.8))
	title_label.add_theme_constant_override("shadow_offset_x", 4)
	title_label.add_theme_constant_override("shadow_offset_y", 4)

	# Add pulsing animation
	_add_title_pulse_effect(title_label)

func _add_title_pulse_effect(label: Label):
	"""Add dramatic pulsing effect to title"""
	var tween = label.create_tween()
	tween.set_loops()

	var bright_color = Color(1.2, 1.0, 0.4, 1.0)
	var normal_color = Color(1.0, 0.9, 0.3, 1.0)

	tween.tween_property(label, "modulate", bright_color, 2.0)
	tween.tween_property(label, "modulate", normal_color, 2.0)

func _create_ornate_status_panel(panel: Panel):
	"""Create rich status panel with mystical styling"""
	var style_box = StyleBoxFlat.new()

	# Deep mystical background
	style_box.bg_color = Color(0.05, 0.08, 0.15, 0.95)
	style_box.border_color = Color(0.7, 0.5, 0.9, 0.9)  # Purple eldritch

	# Thick ornate borders
	style_box.border_width_left = 5
	style_box.border_width_right = 5
	style_box.border_width_top = 5
	style_box.border_width_bottom = 5

	# Rounded corners
	style_box.corner_radius_top_left = 15
	style_box.corner_radius_top_right = 15
	style_box.corner_radius_bottom_left = 15
	style_box.corner_radius_bottom_right = 15

	# Dramatic shadow
	style_box.shadow_color = Color(0.2, 0.1, 0.4, 0.8)
	style_box.shadow_size = 10
	style_box.shadow_offset = Vector2(5, 5)

	panel.add_theme_stylebox_override("panel", style_box)

func _create_portal_entrance_button():
	"""Make the play button look like a mystical portal entrance"""
	var normal_style = StyleBoxFlat.new()
	var hover_style = StyleBoxFlat.new()
	var pressed_style = StyleBoxFlat.new()

	# Normal state - dark void with purple energy
	normal_style.bg_color = Color(0.1, 0.05, 0.2, 0.95)
	normal_style.border_color = Color(0.6, 0.4, 0.9, 1.0)
	_apply_portal_button_styling(normal_style)

	# Hover state - bright void energy
	hover_style.bg_color = Color(0.2, 0.1, 0.3, 0.98)
	hover_style.border_color = Color(0.9, 0.6, 1.0, 1.0)
	_apply_portal_button_styling(hover_style)

	# Pressed state - deep void
	pressed_style.bg_color = Color(0.05, 0.02, 0.1, 0.9)
	pressed_style.border_color = Color(0.4, 0.2, 0.6, 0.8)
	_apply_portal_button_styling(pressed_style)

	play_btn.add_theme_stylebox_override("normal", normal_style)
	play_btn.add_theme_stylebox_override("hover", hover_style)
	play_btn.add_theme_stylebox_override("pressed", pressed_style)

	# Epic text styling
	play_btn.add_theme_font_size_override("font_size", 20)
	play_btn.add_theme_color_override("font_color", Color(1.0, 0.9, 1.0, 1.0))
	play_btn.add_theme_color_override("font_hover_color", Color(1.0, 1.0, 1.0, 1.0))

func _apply_portal_button_styling(style_box: StyleBoxFlat):
	"""Apply mystical portal styling to button"""
	style_box.border_width_left = 4
	style_box.border_width_right = 4
	style_box.border_width_top = 4
	style_box.border_width_bottom = 4
	style_box.corner_radius_top_left = 12
	style_box.corner_radius_top_right = 12
	style_box.corner_radius_bottom_left = 12
	style_box.corner_radius_bottom_right = 12

	# Epic shadow
	style_box.shadow_color = Color(0.3, 0.1, 0.5, 0.9)
	style_box.shadow_size = 8
	style_box.shadow_offset = Vector2(4, 4)

func _create_ancient_tome_panel(panel: Panel, tome_type: String):
	"""Create panels that look like ancient mystical tomes"""
	var style_box = StyleBoxFlat.new()

	match tome_type:
		"corruption":
			# Dark corruption tome
			style_box.bg_color = Color(0.08, 0.03, 0.08, 0.95)
			style_box.border_color = Color(0.7, 0.3, 0.7, 0.9)

		"echoes":
			# Golden echoes tome
			style_box.bg_color = Color(0.1, 0.08, 0.03, 0.95)
			style_box.border_color = Color(0.9, 0.7, 0.3, 0.9)

	# Thick tome-like borders
	style_box.border_width_left = 4
	style_box.border_width_right = 4
	style_box.border_width_top = 4
	style_box.border_width_bottom = 4

	# Ancient book corners
	style_box.corner_radius_top_left = 10
	style_box.corner_radius_top_right = 10
	style_box.corner_radius_bottom_left = 10
	style_box.corner_radius_bottom_right = 10

	# Mystical shadow
	style_box.shadow_color = Color(0.2, 0.1, 0.3, 0.7)
	style_box.shadow_size = 6
	style_box.shadow_offset = Vector2(3, 3)

	panel.add_theme_stylebox_override("panel", style_box)

func _enhance_all_hub_labels():
	"""Enhance all labels with rich typography"""
	# Status labels
	_create_rich_label(level_label, Color(0.9, 0.7, 1.0, 1.0), 16)
	_create_rich_label(coins_label, Color(1.0, 0.9, 0.4, 1.0), 16)
	_create_rich_label(xp_label, Color(0.7, 0.9, 1.0, 1.0), 14)

	# Panel titles
	var upgrades_title = find_child("UpgradesTitle")
	if upgrades_title:
		_create_rich_label(upgrades_title, Color(0.9, 0.5, 0.9, 1.0), 18)

	var progress_title = find_child("ProgressTitle")
	if progress_title:
		_create_rich_label(progress_title, Color(1.0, 0.8, 0.3, 1.0), 18)

	# Content labels
	_create_rich_label(stats_label, Color(0.8, 0.8, 0.9, 1.0), 14)
	_create_rich_label(progress_label, Color(0.9, 0.9, 0.7, 1.0), 14)

func _create_rich_label(label: Label, color: Color, font_size: int):
	"""Create rich label with glow effects"""
	label.add_theme_font_size_override("font_size", font_size)
	label.add_theme_color_override("font_color", color)

	# Glow shadow
	label.add_theme_color_override("font_shadow_color", Color(color.r, color.g, color.b, 0.6))
	label.add_theme_constant_override("shadow_offset_x", 2)
	label.add_theme_constant_override("shadow_offset_y", 2)

func _create_mystical_progress_bars():
	"""Create rich mystical progress bars"""
	_enhance_mystical_bar(xp_bar, Color(0.3, 0.7, 1.0, 0.9))

func _enhance_mystical_bar(bar: ProgressBar, fill_color: Color):
	"""Enhance progress bar with mystical styling"""
	var bg_style = StyleBoxFlat.new()
	var fill_style = StyleBoxFlat.new()

	# Mystical background
	bg_style.bg_color = Color(0.05, 0.05, 0.1, 0.9)
	bg_style.border_color = Color(0.3, 0.3, 0.5, 0.8)
	bg_style.border_width_left = 2
	bg_style.border_width_right = 2
	bg_style.border_width_top = 2
	bg_style.border_width_bottom = 2
	bg_style.corner_radius_top_left = 8
	bg_style.corner_radius_top_right = 8
	bg_style.corner_radius_bottom_left = 8
	bg_style.corner_radius_bottom_right = 8

	# Glowing fill
	fill_style.bg_color = fill_color
	fill_style.corner_radius_top_left = 6
	fill_style.corner_radius_top_right = 6
	fill_style.corner_radius_bottom_left = 6
	fill_style.corner_radius_bottom_right = 6

	bar.add_theme_stylebox_override("background", bg_style)
	bar.add_theme_stylebox_override("fill", fill_style)

	print("üåë RICH Eldritch Hub Theme Applied!")

func _preview_random_card():
	"""Show a random card preview in the hub"""
	# Card preview removido do Hub
	pass

func _update_ui():
	var stats = GameData.get_player_stats()

	# Status do jogador - usando assets quando dispon√≠veis
	level_label.text = "Profundidade %d" % stats.level
	xp_label.text = "Corrup√ß√£o: %d/%d" % [stats.xp, stats.xp_needed]
	coins_label.text = "%d ess√™ncias" % stats.coins

	# Adicionar √≠cones se existirem
	_add_ui_icons()

	# Barra de XP com novo tema
	var xp_progress = float(stats.xp) / float(stats.xp_needed) * 100.0
	xp_bar.value = xp_progress

	# REVOLUTIONARY: Update UI based on corruption level
	_update_adaptive_ui(stats)

	# Corrup√ß√µes ativas
	stats_label.text = "Vitalidade: %d\nEnergia Sombria: %d\nFor√ßa Abissal: %d" % [stats.max_hp, stats.starting_energy, stats.damage_bonus]

	# Ecos do abismo
	progress_label.text = "Almas Coletadas: %d\nDescidas Profundas: %d\nMaior Profundidade: %d" % [stats.victories, stats.current_streak, stats.best_streak]

	print("üìä REVOLUTIONARY Hub atualizado - N√≠vel %d, %d moedas" % [stats.level, stats.coins])

func _update_adaptive_ui(stats):
	"""REVOLUTIONARY: Update UI elements based on game state"""
	# Calculate corruption percentage
	var corruption_level = float(stats.xp) / float(stats.xp_needed)

	# Adaptive background blur based on corruption
	var bg_blur_strength = int(corruption_level * 10) + 1

	# Adaptive button colors based on depth
	var depth_factor = float(stats.level) / 20.0  # Normalize to 0-1
	var corruption_red = corruption_level * 0.3
	var depth_purple = depth_factor * 0.5

	# Update button colors dynamically
	if play_btn:
		var dynamic_color = Color(0.15 + corruption_red, 0.1, 0.25 + depth_purple, 0.95)
		play_btn.modulate = Color(1.0 + corruption_level * 0.3, 1.0, 1.0 + depth_factor * 0.2)

	# Adaptive panel transparency
	var panels = [find_child("StatusPanel"), find_child("UpgradesPanel"), find_child("ProgressPanel")]
	for panel in panels:
		if panel:
			panel.modulate.a = 0.9 + corruption_level * 0.1

	print("üé® ADAPTIVE UI updated - Corruption: %.2f, Depth: %.2f" % [corruption_level, depth_factor])

func _add_ui_icons():
	"""Add generated UI icons to labels if they exist"""
	# Try to find and add health icon
	var health_icon_path = "res://assets/generated/ui/icon_health.png"
	if ResourceLoader.exists(health_icon_path):
		var health_icon = TextureRect.new()
		health_icon.texture = load(health_icon_path)
		health_icon.custom_minimum_size = Vector2(24, 24)
		# Could add this to a container if needed

	# Similar for other icons - but for simplicity, just using text for now

func _on_play_pressed():
	print("üéÆ Iniciando nova run...")
	# Iniciar nova run e ir para o mapa
	RunManager.start_new_run()
	get_tree().change_scene_to_file("res://scenes/ui/RunMap.tscn")

